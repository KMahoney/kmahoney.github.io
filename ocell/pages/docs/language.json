{"zipper":{"tag":"NameFocus","args":[{"right":"","left":"Language"},[{"body":{"tag":"Markdown","args":["# A Brief Language Tutorial\n\n## Simple Values\n\nCells can have simple number values.\n\nNote that the type of the expression is displayed underneath, along with its evaluation (⇒).\n"]},"id":4},{"body":{"tag":"Named","args":["number-value",{"tag":"Expression","args":[[{"tag":"Value","args":["42"]}]]}]},"id":3},{"body":{"tag":"Markdown","args":["## Operations\n\nNumbers can be operated on with `+` `-` `*` and `/`. The usual precedence rules apply. OCell will sometimes use a bullet (·) for multiplication and the division symbol (÷).\n\nCompare values with `=` and `/=`."]},"id":5},{"body":{"tag":"Named","args":["operators",{"tag":"Expression","args":[[{"tag":"Value","args":["42"]},{"tag":"Value","args":["*"]},{"tag":"Value","args":["42"]},{"tag":"Value","args":["-"]},{"tag":"Value","args":["1"]},{"tag":"Value","args":["/"]},{"tag":"Value","args":["10"]},{"tag":"Value","args":["+"]},{"tag":"Value","args":["2"]}]]}]},"id":6},{"body":{"tag":"Named","args":["compare",{"tag":"Expression","args":[[{"tag":"Value","args":["1"]},{"tag":"Value","args":["+"]},{"tag":"Value","args":["1"]},{"tag":"Value","args":["="]},{"tag":"Value","args":["2"]}]]}]},"id":25},{"body":{"tag":"Markdown","args":["## Sub Expressions\n\nUse `(` to insert sub-expressions.\n\nMove out of the current sub expression with `)`."]},"id":8},{"body":{"tag":"Named","args":["sub-exp",{"tag":"Expression","args":[[{"tag":"Value","args":["42"]},{"tag":"Value","args":["*"]},{"tag":"SubExp","args":[[{"tag":"Value","args":["42"]},{"tag":"Value","args":["-"]},{"tag":"Value","args":["1"]},{"tag":"Value","args":["/"]},{"tag":"SubExp","args":[[{"tag":"Value","args":["10"]},{"tag":"Value","args":["+"]},{"tag":"Value","args":["2"]}]]}]]}]]}]},"id":9},{"body":{"tag":"Markdown","args":["## References\n\nYou can reference other cells by using the cell name.\n\nCircular dependencies are not allowed."]},"id":10},{"body":{"tag":"Named","args":["ref",{"tag":"Expression","args":[[{"tag":"Value","args":["operators"]},{"tag":"Value","args":["+"]},{"tag":"Value","args":["sub-exp"]}]]}]},"id":11},{"body":{"tag":"Markdown","args":["## Lambdas\n\nInsert lambdas using `\\`.\n\nYou can effectively have a function with multiple arguments by nesting multiple lambdas."]},"id":12},{"body":{"tag":"Named","args":["lambda",{"tag":"Expression","args":[[{"tag":"Lambda","args":["x",[{"tag":"Value","args":["x"]},{"tag":"Value","args":["+"]},{"tag":"Value","args":["1"]}]]}]]}]},"id":13},{"body":{"tag":"Named","args":["add",{"tag":"Expression","args":[[{"tag":"Lambda","args":["x",[{"tag":"Lambda","args":["y",[{"tag":"Value","args":["x"]},{"tag":"Value","args":["+"]},{"tag":"Value","args":["y"]}]]}]]}]]}]},"id":15},{"body":{"tag":"Markdown","args":["## Application\n\nApply a function by writing an argument after it. \n\nNote that functions with multiple arguments are partially applied."]},"id":16},{"body":{"tag":"Named","args":["app",{"tag":"Expression","args":[[{"tag":"Value","args":["add"]},{"tag":"Value","args":["1"]},{"tag":"Value","args":["2"]}]]}]},"id":18},{"body":{"tag":"Named","args":["partial-app",{"tag":"Expression","args":[[{"tag":"Value","args":["add"]},{"tag":"Value","args":["1"]}]]}]},"id":17},{"body":{"tag":"Named","args":["nested-app",{"tag":"Expression","args":[[{"tag":"SubExp","args":[[{"tag":"Value","args":["add"]},{"tag":"SubExp","args":[[{"tag":"Value","args":["add"]},{"tag":"Value","args":["1"]},{"tag":"Value","args":["1"]}]]},{"tag":"SubExp","args":[[{"tag":"Value","args":["partial-app"]},{"tag":"Value","args":["1"]}]]}]]}]]}]},"id":26}]]},"nextId":30,"id":null,"projectName":"Language"}